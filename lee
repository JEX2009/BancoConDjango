
Estructura de DJANGO
.
├── mi_proyecto/         # Directorio raíz del proyecto (con el mismo nombre que el proyecto)
│   ├── __init__.py
│   ├── asgi.py         # Punto de entrada ASGI
│   ├── settings.py     # Archivo de configuración principal
│   ├── urls.py         # Definiciones de URLs del proyecto
│   └── wsgi.py         # Punto de entrada WSGI
├── manage.py           # Utilidad de línea de comandos
└── mi_app/             # Ejemplo de un directorio de aplicación (puedes tener muchas)
    ├── __init__.py
    ├── admin.py        # Configuración de la interfaz de administración
    ├── apps.py         # Configuración de la aplicación
    ├── migrations/     # Directorio para las migraciones de la base de datos
    │   └── __init__.py
    ├── models.py       # Definición de los modelos de datos
    ├── tests.py        # Pruebas unitarias de la aplicación
    └── views.py        # Lógica de las vistas de la aplicación

Como correr DJANGO
#Crear un proyecto django-admin startproject "NombreProyecto" DireccionAlojamiento
#Como correrlo python bancoV2/manage.py runserver

las apps son funcionalidades para crearlas se hace
para que DJANGO las reconozca hay que agregar el nombre en el array
 de settings"INSTALLED_APPS"
python bancoV2/manage.py startapp "NombreProyecto"

En la aplicacion podemos tener urls que se importan a la principal con include
Asi: path('Aca si va algo en la ruta',include('carpeta.urls'))
path('home/',include('app.urls'), name= "nombreParaEncontrar")
El apartado name es para prevenir usar la ruta en el proyecto


Las migraciones ya hacen un db por nosotros
python bancoV2/manage.py makemigrations esto importan
python bancoV2/manage.py migration crea ñas tablas y la bd

para crear nuestras tablas se hace desde las apps y en models
con una clase que hereda models.Model y ahi se ponen las columnas

class Nombre(models.Model):
    name= models.CharField(max_lenght=200)
    tabla = models.ForeingKey(nombreAsociado, on_delete=models.CASCADE)

Para agregar datos se hace con 
python bancoV2/manage.py shell

renderizar htmls es con render(request, "nombreHtml", {nombre: dato que se quiere mostrar})

en html los datos van asi {{nombre}}
con esto {% %} puedes poner codigo Python en Html
con esto {% extends 'nombrePlantilla' %} puedes poner una plantilla
en la plantilla hay que poner {% block content %} y despues {% endblock %} y entre ellos se pone lo que se quiere de la pagina principal
Esto se parece mucho a php

Para crear un formulario se puede hacer con python y que aparezca en html

from django import forms

class nombre(forms.Form):
    propiedades= forms.tipoDato(label=txt , max_lenght, required=False, widget= tipoDatoHtml(attrs{Aca los atributos}))

en la vista en render se pasa la clase y hay que tener un if si es get que muestre el html y si es post que cree un objeto

en el html se pone 
{% csrf_token %}
{{nombreEnRender}}

Lo que no es html es un contenido estatico
se carga asi para imagen
{% static 'elNombreArchivo.extension' %}

para css y javaScript
al inicio de todo hay que poner {% load static %}

